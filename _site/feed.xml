<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-24T22:48:08+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JIN ZHE’s blog</title><subtitle>Jin Zhe's nuggets.</subtitle><author><name>Jin Zhe</name></author><entry><title type="html">Installing PyTorch with CUDA in Conda</title><link href="http://localhost:4000/guides/installing-pytorch-with-cuda-in-conda/" rel="alternate" type="text/html" title="Installing PyTorch with CUDA in Conda" /><published>2018-03-02T16:10:00+08:00</published><updated>2018-03-02T16:10:00+08:00</updated><id>http://localhost:4000/guides/installing-pytorch-with-cuda-in-conda</id><content type="html" xml:base="http://localhost:4000/guides/installing-pytorch-with-cuda-in-conda/">&lt;p&gt;The following guide shows you how to install &lt;a href=&quot;http://pytorch.org/&quot;&gt;PyTorch&lt;/a&gt; with CUDA
under the Conda virtual environment.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu OS&lt;/li&gt;
  &lt;li&gt;NVIDIA GPU with CUDA support&lt;/li&gt;
  &lt;li&gt;Conda (see installation instructions &lt;a href=&quot;/guides/getting-up-to-speed-with-conda/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;CUDA (&lt;em&gt;installed by system admin&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;specifications&quot;&gt;Specifications&lt;/h2&gt;
&lt;p&gt;This guide is written for the following specs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu 16.04&lt;/li&gt;
  &lt;li&gt;Python 3.6&lt;/li&gt;
  &lt;li&gt;CUDA 9.0&lt;/li&gt;
  &lt;li&gt;cuDNN v7.1&lt;/li&gt;
  &lt;li&gt;Miniconda 3&lt;/li&gt;
  &lt;li&gt;OpenCV3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guide&quot;&gt;Guide&lt;/h2&gt;
&lt;p&gt;First, get cuDNN by following this &lt;a href=&quot;/guides/getting-cudnn/&quot;&gt;cuDNN Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then we need to update &lt;code class=&quot;highlighter-rouge&quot;&gt;mkl&lt;/code&gt; package in base environment to prevent
&lt;a href=&quot;https://github.com/pytorch/pytorch/issues/6068#issuecomment-377226963&quot;&gt;this issue&lt;/a&gt; later on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda update mkl&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s create a virtual Conda environment called “pytorch”:
Let’s create a virtual Conda environment called “pytorch”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; pytorch &lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;You many of course use a different environment name, just be sure to adjust
accordingly for the rest of this guide&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After it prepares the environment and installs the default packages, activate
the virtual environment via:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda activate pytorch
&lt;span class=&quot;c&quot;&gt;# to deactivate: conda deactivate pytorch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s install the necessary dependencies in our current PyTorch environment:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Install basic dependencies&lt;/span&gt;
conda install cffi cmake future gflags glog hypothesis lmdb mkl mkl-include numpy opencv protobuf &lt;span class=&quot;nv&quot;&gt;pyyaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.12 setuptools scipy six snappy typing &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install LAPACK support for the GPU&lt;/span&gt;
conda install &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; pytorch magma-cuda90 &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;We specified &lt;code class=&quot;highlighter-rouge&quot;&gt;pyyaml=3.12&lt;/code&gt; because newer versions will be incompatible with
&lt;a href=&quot;https://github.com/facebookresearch/Detectron&quot;&gt;Detectron&lt;/a&gt;, should you use it with Caffe2.
See &lt;a href=&quot;https://github.com/facebookresearch/DensePose/issues/216&quot;&gt;this issue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For LAPACK support, install &lt;code class=&quot;highlighter-rouge&quot;&gt;magma-cudaxx&lt;/code&gt; where xx reflects your cuda
version, for e.g. 91 corresponds to cuda 9.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s clone pytorch’s repo and its submodules into our home directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
git clone &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; git@github.com:pytorch/pytorch.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pytorch
git submodule update &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before we begin manually compiling the binaries, we need to first assign some
environment variables.&lt;/p&gt;

&lt;p&gt;Firstly, for our non-standard installation of cuDNN, we
need to tell PyTorch where to look for &lt;code class=&quot;highlighter-rouge&quot;&gt;libcudart&lt;/code&gt; via the environment variable
&lt;code class=&quot;highlighter-rouge&quot;&gt;$LD_LIBRARY_PATH&lt;/code&gt;. If you have followed my &lt;a href=&quot;/guides/getting-cudnn/&quot;&gt;cuDNN Guide&lt;/a&gt;
you would have assigned this to be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt;/lib64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we need to tells CMake to look for packages in our Conda environment
before looking in system install locations:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_PREFIX_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONDA_PREFIX&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We are now ready to install pytorch via the very convenient installer in the
repo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CUDNN_LIB_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt;/lib64/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CUDNN_INCLUDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt;/include/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MAX_JOBS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;25 &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
python setup.py install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;To determine assignment for MAX_JOBS, please use the number that is one more
than the output from &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /proc/cpuinfo | grep processor | wc -l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are now ready to test if PyTorch has been installed correctly with CUDA&lt;/p&gt;

&lt;p&gt;To check if PyTorch was installed successfully:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Basic test:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~ &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'from caffe2.python import core'&lt;/span&gt; 2&amp;gt;/dev/null &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failure&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; Success&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# For a comprehensive test:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/pytorch
python &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/run_test.py&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To check if GPU build was successful:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Check number of GPUs visible to PyTorch:&lt;/span&gt;
python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'import torch; print(torch.cuda.is_available())'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; 2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# See initial output from the following to ensure GPU is used:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/pytorch
python caffe2/python/operator_test/activation_ops_test.py&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;torchvision&quot;&gt;Torchvision&lt;/h3&gt;
&lt;p&gt;If you are also installing &lt;a href=&quot;https://github.com/pytorch/vision&quot;&gt;torchvision&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/pytorch
git clone https://github.com/pytorch/vision
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vision
python setup.py install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Jin Zhe</name></author><category term="Anaconda" /><category term="Caffe2" /><category term="CUDA" /><category term="cuDNN" /><category term="Miniconda" /><category term="PyTorch" /><summary type="html"></summary></entry><entry><title type="html">Installing Caffe with CUDA in Conda</title><link href="http://localhost:4000/guides/installing-caffe-with-cuda-in-conda/" rel="alternate" type="text/html" title="Installing Caffe with CUDA in Conda" /><published>2018-02-28T16:10:00+08:00</published><updated>2018-02-28T16:10:00+08:00</updated><id>http://localhost:4000/guides/installing-caffe-with-cuda-in-conda</id><content type="html" xml:base="http://localhost:4000/guides/installing-caffe-with-cuda-in-conda/">&lt;p&gt;The following guide shows you how to install install &lt;a href=&quot;http://caffe.berkeleyvision.org&quot;&gt;Caffe&lt;/a&gt; with CUDA
under the Conda virtual environment.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu OS&lt;/li&gt;
  &lt;li&gt;NVIDIA GPU with CUDA support&lt;/li&gt;
  &lt;li&gt;Conda (see installation instructions &lt;a href=&quot;/guides/getting-up-to-speed-with-conda/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;CUDA (&lt;em&gt;installed by system admin&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;specifications&quot;&gt;Specifications&lt;/h2&gt;
&lt;p&gt;This guide is written for the following specs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu 16.04&lt;/li&gt;
  &lt;li&gt;Python 2.7&lt;/li&gt;
  &lt;li&gt;CUDA 8&lt;/li&gt;
  &lt;li&gt;cuDNN v7.1&lt;/li&gt;
  &lt;li&gt;Miniconda 2&lt;/li&gt;
  &lt;li&gt;OpenCV3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guide&quot;&gt;Guide&lt;/h2&gt;
&lt;p&gt;First, get cuDNN by following this &lt;a href=&quot;/guides/getting-cudnn/&quot;&gt;cuDNN Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s create a virtual Conda environment called “caffe”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; caffe &lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2.7&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;You many of course use a different environment name, just be sure to adjust
accordingly for the rest of this guide&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After it prepares the environment and installs the default packages, activate
the virtual environment via:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda activate caffe
&lt;span class=&quot;c&quot;&gt;# to deactivate: conda deactivate caffe&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s install the necessary dependencies in our current caffe environment:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda install lmdb openblas glog gflags hdf5 protobuf leveldb boost opencv cmake &lt;span class=&quot;nv&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.15 &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
conda install &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge doxygen &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s clone caffe’s repo and its submodules into our home directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
git clone &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; https://github.com/BVLC/caffe.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;caffe
git submodule update &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We shall avoid polluting the caffe source tree by building
within a build folder&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#=&amp;gt; ~/caffe/build&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We shall now build the package using CMake with the following flags&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cmake &lt;span class=&quot;nt&quot;&gt;-DBLAS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;open &lt;span class=&quot;nt&quot;&gt;-DCUDNN_INCLUDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt;/include/ &lt;span class=&quot;nt&quot;&gt;-DCUDNN_LIBRARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt;/lib64/libcudnn.so &lt;span class=&quot;nt&quot;&gt;-DCMAKE_PREFIX_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONDA_PREFIX&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DCMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONDA_PREFIX&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DCMAKE_CXX_FLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-std=c++11&quot;&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;CMake variable &lt;code class=&quot;highlighter-rouge&quot;&gt;BLAS=open&lt;/code&gt; indicates that we would like use OpenBLAS instead of the default
which is ATLAS&lt;/li&gt;
  &lt;li&gt;CMake variable &lt;code class=&quot;highlighter-rouge&quot;&gt;CUDNN_INCLUDE&lt;/code&gt; indicates where to find the &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; directory for your
cuDNN&lt;/li&gt;
  &lt;li&gt;CMake variable &lt;code class=&quot;highlighter-rouge&quot;&gt;CUDNN_LIBRARY&lt;/code&gt; indicates where to find the library path for your cuDNN&lt;/li&gt;
  &lt;li&gt;CMake variable  &lt;code class=&quot;highlighter-rouge&quot;&gt;CMAKE_PREFIX_PATH&lt;/code&gt; tells CMake to look for packages in your conda environment
before looking in system install locations (like &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;CMake variable  &lt;code class=&quot;highlighter-rouge&quot;&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; indicates where to install Caffe binaries&lt;/li&gt;
  &lt;li&gt;CMake variable  &lt;code class=&quot;highlighter-rouge&quot;&gt;DCMAKE_CXX_FLAGS&lt;/code&gt; indicates which C++ compiler version to use&lt;/li&gt;
  &lt;li&gt;CMake variable  &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt; indicates whether or not to use CPU-only installation&lt;/li&gt;
  &lt;li&gt;Also see the &lt;a href=&quot;https://github.com/BVLC/caffe/pull/1667&quot;&gt;list of the available make flags&lt;/a&gt; and their default
values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s find out how many cores your machine has&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/cpuinfo | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;processor | wc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; the package efficiently by maximising the number of jobs for it.
General rule of thumb is to use 1 + n number of jobs where n is the output from
the previous command. i.e. number of cores. Mine was 24 so I run the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make all &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; 25
make pycaffe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After make is completed, we are now finally ready to install&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we run test&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make runtest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’d think we’re done, but not quite! We have to point the &lt;code class=&quot;highlighter-rouge&quot;&gt;$PYTHONPATH&lt;/code&gt;
environment variable to our caffe folder like so&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/caffe/python:&lt;span class=&quot;nv&quot;&gt;$PYTHONPATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However it will be tedious to type that everytime we activate our environment.
You may append that line to &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; but some variables
such as &lt;code class=&quot;highlighter-rouge&quot;&gt;$PYTHONPATH&lt;/code&gt; are potentially used in many environments and it could
lead to python import errors when the paths contain different modules sharing
the same name. For instance, both caffe and caffe2 contain a module named
‘caffe’.&lt;/p&gt;

&lt;p&gt;The solution to overcome this is to write a script to save our environment
variables within our environemnt so that they get loaded automatically every
time we activate our environment and get unset automatically when we deactivate
our environment. The following steps are an adaptation of this
&lt;a href=&quot;https://conda.io/docs/user-guide/tasks/manage-environments.html#macos-and-linux&quot;&gt;guide&lt;/a&gt;
stated in the official Conda documentation.&lt;/p&gt;

&lt;p&gt;Let’s enter our environment directory and do the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONDA_PREFIX&lt;/span&gt;
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ./etc/conda/activate.d
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ./etc/conda/deactivate.d
touch ./etc/conda/activate.d/env_vars.sh
touch ./etc/conda/deactivate.d/env_vars.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;./etc/conda/activate.d/env_vars.sh&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/caffe/python:&lt;span class=&quot;nv&quot;&gt;$PYTHONPATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;./etc/conda/deactivate.d/env_vars.sh&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;PYTHONPATH&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s reload the current environment to reflect the variables&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda activate caffe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We are now ready to test if caffe has been installed correctly with CUDA&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;c&quot;&gt;# To check if Caffe build was successful&lt;/span&gt;
python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'import caffe; caffe.set_mode_gpu()'&lt;/span&gt; 2&amp;gt;/dev/null &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failure&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; Success&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Jin Zhe</name></author><category term="Anaconda" /><category term="Caffe" /><category term="Conda" /><category term="CUDA" /><category term="cuDNN" /><category term="Miniconda" /><summary type="html"></summary></entry><entry><title type="html">Installing Caffe2 with CUDA in Conda</title><link href="http://localhost:4000/guides/installing-caffe2-with-cuda-in-conda/" rel="alternate" type="text/html" title="Installing Caffe2 with CUDA in Conda" /><published>2018-02-19T16:10:00+08:00</published><updated>2018-02-19T16:10:00+08:00</updated><id>http://localhost:4000/guides/installing-caffe2-with-cuda-in-conda</id><content type="html" xml:base="http://localhost:4000/guides/installing-caffe2-with-cuda-in-conda/">&lt;h1 id=&quot;deprecation-warning&quot;&gt;Deprecation warning&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;caffe2-merge&quot;&gt;Since May 2008, Caffe2 has been merged in PyTorch&lt;/a&gt;. To install
the lastest version of Caffe2, simply get &lt;a href=&quot;https://github.com/pytorch/pytorch&quot;&gt;PyTorch&lt;/a&gt;. The
instructions for installing PyTorch can be accessed &lt;a href=&quot;pytorch-guide&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following guide is kept here for posterity.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The following guide shows you how to install install &lt;a href=&quot;https://caffe2.ai&quot;&gt;caffe2&lt;/a&gt; with
CUDA under Conda virtual environment. This guide is meant for machines running
on Ubuntu 16.04 equipped with NVIDIA GPUs with CUDA support. i.e it assumes CUDA
is already installed by a system admin.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu OS&lt;/li&gt;
  &lt;li&gt;NVIDIA GPU&lt;/li&gt;
  &lt;li&gt;Conda (see installation instructions &lt;a href=&quot;/guides/getting-up-to-speed-with-conda/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;CUDA (&lt;em&gt;installed by system admin&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;specifications&quot;&gt;Specifications&lt;/h2&gt;
&lt;p&gt;This guide is written for the following specs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu 16.04&lt;/li&gt;
  &lt;li&gt;Python 2.7&lt;/li&gt;
  &lt;li&gt;CUDA 8&lt;/li&gt;
  &lt;li&gt;cuDNN v7.1&lt;/li&gt;
  &lt;li&gt;Miniconda 2&lt;/li&gt;
  &lt;li&gt;OpenCV3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guide&quot;&gt;Guide&lt;/h2&gt;
&lt;p&gt;First, get cuDNN by following this &lt;a href=&quot;/guides/getting-cudnn/&quot;&gt;cuDNN Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s create a virtual Conda environment called “caffe2”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; caffe2 &lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2.7&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;You many of course use a different environment name, just be sure to adjust
accordingly for the rest of this guide&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After it prepares the environment and installs the default packages, activate
the virtual environment via:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda activate caffe2
&lt;span class=&quot;c&quot;&gt;# to deactivate: conda deactivate caffe2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s install the necessary dependencies in our current caffe2 environment:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda install future gflags glog lmdb mkl mkl-include numpy opencv protobuf snappy six cmake &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s clone caffe2’s repo and its submodules into our home directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
git clone &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; https://github.com/caffe2/caffe2.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;caffe2
git submodule update &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We shall avoid polluting the caffe2 source tree by building
within a build folder&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#=&amp;gt; ~/caffe2/build&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We shall now build the package using CMake with the following flags&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cmake &lt;span class=&quot;nt&quot;&gt;-DCUDNN_INCLUDE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt;/include &lt;span class=&quot;nt&quot;&gt;-DCUDNN_LIBRARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt;/lib64/libcudnn.so &lt;span class=&quot;nt&quot;&gt;-DCMAKE_PREFIX_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONDA_PREFIX&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DCMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONDA_PREFIX&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;CMake variable  &lt;code class=&quot;highlighter-rouge&quot;&gt;CUDNN_INCLUDE_DIR&lt;/code&gt; indicates where to find the &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; directory for your
cuDNN&lt;/li&gt;
  &lt;li&gt;CMake variable  &lt;code class=&quot;highlighter-rouge&quot;&gt;CUDNN_LIBRARY&lt;/code&gt; indicates where to find the &lt;code class=&quot;highlighter-rouge&quot;&gt;libcudnn.so&lt;/code&gt; for your cuDNN&lt;/li&gt;
  &lt;li&gt;CMake variable  &lt;code class=&quot;highlighter-rouge&quot;&gt;CMAKE_PREFIX_PATH&lt;/code&gt; tells CMake to look for packages in your conda environment
before looking in system install locations (like &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;CMake variable  &lt;code class=&quot;highlighter-rouge&quot;&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; indicates where to install Caffe2 binaries such as
&lt;code class=&quot;highlighter-rouge&quot;&gt;libcaffe2.dylib&lt;/code&gt; after Caffe2 has been successfully built, the default is
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt; which will require administrator privilege&lt;/li&gt;
  &lt;li&gt;CMake variable  &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt; indicates whether or not to use CPU=only installation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s find out how many cores your machine has&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/cpuinfo | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;processor | wc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; the package efficiently by maximising the number of jobs for it.
General rule of thumb is to use 1 + n number of jobs where n is the output from
the previous command. i.e. number of cores. Mine was 24 so I run the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; 25&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After make is completed, we are now finally ready to install&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’d think we’re done, but not quite! We have to point the &lt;code class=&quot;highlighter-rouge&quot;&gt;$PYTHONPATH&lt;/code&gt;
environment variable to our caffe folder like so&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/caffe2/build:&lt;span class=&quot;nv&quot;&gt;$PYTHONPATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However it will be tedious to type that everytime we activate our environment.
You may append that line to &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; but some variables
such as &lt;code class=&quot;highlighter-rouge&quot;&gt;$PYTHONPATH&lt;/code&gt; are potentially used in many environments and it could
lead to python import errors when the paths contain different modules sharing
the same name. For instance, both caffe and caffe2 contain a module named
‘caffe’.&lt;/p&gt;

&lt;p&gt;The solution to overcome this is to write a script to save our environment
variables within our environemnt so that they get loaded automatically every
time we activate our environment and get unset automatically when we deactivate
our environment. The following steps are an adaptation of this
&lt;a href=&quot;https://conda.io/docs/user-guide/tasks/manage-environments.html#macos-and-linux&quot;&gt;guide&lt;/a&gt;
stated in the official Conda documentation.&lt;/p&gt;

&lt;p&gt;Let’s enter our environment directory and do the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONDA_PREFIX&lt;/span&gt;
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ./etc/conda/activate.d
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ./etc/conda/deactivate.d
touch ./etc/conda/activate.d/env_vars.sh
touch ./etc/conda/deactivate.d/env_vars.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;./etc/conda/activate.d/env_vars.sh&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/caffe2/build:&lt;span class=&quot;nv&quot;&gt;$PYTHONPATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;./etc/conda/deactivate.d/env_vars.sh&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;PYTHONPATH&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s reload the current environment to reflect the variables&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda activate caffe2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We are now ready to test if caffe2 has installed correctly&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;c&quot;&gt;# To check if Caffe2 build was successful&lt;/span&gt;
python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'from caffe2.python import core'&lt;/span&gt; 2&amp;gt;/dev/null &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failure&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; Success&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# To check if Caffe2 GPU build was successful&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This must print a number &amp;gt; 0 in order to use Detectron&lt;/span&gt;
python2 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'from caffe2.python import workspace; print(workspace.NumCudaDevices())'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Jin Zhe</name></author><category term="Anaconda" /><category term="Caffe2" /><category term="Conda" /><category term="CUDA" /><category term="cuDNN" /><category term="Miniconda" /><summary type="html"></summary></entry><entry><title type="html">Getting CUDA with cuDNN</title><link href="http://localhost:4000/guides/getting-cudnn/" rel="alternate" type="text/html" title="Getting CUDA with cuDNN" /><published>2018-02-18T16:10:00+08:00</published><updated>2018-02-18T16:10:00+08:00</updated><id>http://localhost:4000/guides/getting-cudnn</id><content type="html" xml:base="http://localhost:4000/guides/getting-cudnn/">&lt;p&gt;In this guide I will show you how to install CUDA with cuDNN in your home
directory without invoking admin privileges. Unless stated otherwise, we
will be using this configuration for all of my guides.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu OS 16.04&lt;/li&gt;
  &lt;li&gt;NVIDIA GPU with driver installed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is&quot;&gt;What is&lt;/h2&gt;
&lt;p&gt;From NVIDIA:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUDA® is a parallel computing platform and programming model developed by
  NVIDIA for general computing on graphical processing units (GPUs). With CUDA,
  developers are able to dramatically speed up computing applications by
  harnessing the power of GPUs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The NVIDIA CUDA® Deep Neural Network library (cuDNN) is a GPU-accelerated
  library of primitives for deep neural networks. cuDNN provides highly tuned
  implementations for standard routines such as forward and backward convolution,
  pooling, normalization, and activation layers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In essence, if you are working on deep learning tools and require
GPU-enabled processes, you will need CUDA along with cuDNN.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;
&lt;p&gt;The reason for a non-standard installation is two-fold:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You may not have admin privileges to install CUDA and cuDNN to system paths
in the conventional manner&lt;/li&gt;
  &lt;li&gt;Even if your sysadmin have already installed CUDA or cuDNN on your machine,
it may still be a good idea to install them on your own because repeating
research experiments by others sometimes require specific versions of CUDA and
cuDNN. Non-standard installations can thus grant you the ability to toggle
between various versions under different environments easily using a
virtual environment manager such as &lt;a href=&quot;https://docs.conda.io/en/latest/index.html&quot;&gt;Conda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;getting-cuda&quot;&gt;Getting CUDA&lt;/h2&gt;
&lt;p&gt;The standard installation path for cuda is the versioned path
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/cuda-x.x&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;x.x&lt;/code&gt; reflects the version number. The standard
installation will also create a symlink &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/cuda&lt;/code&gt; to that versioned
install path. You may check if a sysadmin had already installed cuda in your
machine via the command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /usr/local/cuda/version.txt
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; CUDA Version 8.0.61&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s heave over to &lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot;&gt;NVIDIA’s CUDA download page&lt;/a&gt;
then select your system configurations and download the &lt;strong&gt;runfile (local)&lt;/strong&gt; for
the CUDA version that you want. For this guide, I shall choose version 9.0
as the example.&lt;/p&gt;

&lt;p&gt;Let’s make the versioned cuda install directory under &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; following
NVIDIA’s convention of displaying the version in the dirname:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;
mkdir cuda-9.0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s save this under the &lt;code class=&quot;highlighter-rouge&quot;&gt;CUDA_HOME&lt;/code&gt; environment variable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CUDA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/cuda-9.0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I downloaded the runfile named &lt;code class=&quot;highlighter-rouge&quot;&gt;cuda_9.0.176_384.81_linux-run&lt;/code&gt; into my
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Downloads&lt;/code&gt; directory. Let’s head over and install CUDA into the
versioned install directory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Downloads
sh cuda_9.0.176_384.81_linux-run &lt;span class=&quot;nt&quot;&gt;--silent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--toolkit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--toolkitpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the installation is done, we have to ensure the following environment
variables are assigned correctly:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CUDA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# included for sake of completeness&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt;/bin&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;:+:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt;/lib64&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;:+:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# For 32-bit OS: export LD_LIBRARY_PATH=$CUDA_HOME/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may append them to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; if you’re running on your local machine,
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt; if you’re accessing a remote machine via ssh, or better
yet &lt;a href=&quot;https://conda.io/docs/user-guide/tasks/manage-environments.html#saving-environment-variables&quot;&gt;save the environment variables&lt;/a&gt; under a Conda environment!&lt;/p&gt;

&lt;p&gt;We are done for CUDA!&lt;/p&gt;

&lt;h2 id=&quot;getting-cudnn&quot;&gt;Getting cuDNN&lt;/h2&gt;
&lt;p&gt;Installing cuDNN is relatively hassle-free as it’s simply about unpacking
cuDNN files into our &lt;code class=&quot;highlighter-rouge&quot;&gt;$CUDA_HOME&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Download the NVIDIA cuDNN &lt;a href=&quot;https://developer.nvidia.com/cudnn&quot;&gt;here&lt;/a&gt; corresponding to your CUDA
version. You’ll be requried to sign up for a free developer account if you have
not already done so. For this guide I shall choose cuDNN version 7.0.4 as the
example.&lt;/p&gt;

&lt;p&gt;On the download page click on the link that reads
“&lt;em&gt;Download cuDNN v7.0.4 (Nov 13, 2017), for CUDA 9.0&lt;/em&gt;”. It should activate an
accordion style dropdown displaying a couple of download links. We shall choose
the &lt;strong&gt;Library for Linux&lt;/strong&gt; because the other modes of installation requires
admin privileges.&lt;/p&gt;

&lt;p&gt;Lets download &lt;code class=&quot;highlighter-rouge&quot;&gt;cudnn-9.0-linux-x64-v7.tgz&lt;/code&gt; into our &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Downloads&lt;/code&gt; directory
by clicking on the download link that reads “cuDNN v7.0.4 Library for Linux”&lt;/p&gt;

&lt;p&gt;Once the download is complete, we shall head over to the downloads directory
and simply unpack the cuDNN files into our CUDA directory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Downloads
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zxvf&lt;/span&gt; cudnn-9.0-linux-x64-v7.tgz &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CUDA_HOME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--strip-components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it! We are done!&lt;/p&gt;</content><author><name>Jin Zhe</name></author><category term="CUDA" /><category term="cuDNN" /><category term="NVIDIA" /><summary type="html">In this guide I will show you how to install CUDA with cuDNN in your home directory without invoking admin privileges. Unless stated otherwise, we will be using this configuration for all of my guides.</summary></entry><entry><title type="html">Getting up to speed with Conda</title><link href="http://localhost:4000/guides/getting-up-to-speed-with-conda/" rel="alternate" type="text/html" title="Getting up to speed with Conda" /><published>2018-02-18T16:10:00+08:00</published><updated>2018-02-18T16:10:00+08:00</updated><id>http://localhost:4000/guides/getting-up-to-speed-with-conda</id><content type="html" xml:base="http://localhost:4000/guides/getting-up-to-speed-with-conda/">&lt;blockquote&gt;
  &lt;p&gt;“&lt;a href=&quot;https://docs.conda.io/en/latest/index.html&quot;&gt;Conda&lt;/a&gt; is an open source package management system and environment
  management system that runs on Windows, macOS and Linux. Conda quickly
  installs, runs and updates packages and their dependencies. Conda easily
  creates, saves, loads and switches between environments on your local
  computer. It was created for Python programs, but it can package and
  distribute software for any language.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why does this matter you ask? In research, it is often the case that different
experiments and projects requires very different environments to execute and so
a system to organize, manage and switch between different environments is
curcial. In addition, it is also often the case in academic or industrial
research labs that users are not granted admin access to GPU servers. Since you
won’t have the ability to do &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get&lt;/code&gt;, the installation of AI tools
is impossible without virtual environments.&lt;/p&gt;

&lt;p&gt;You might be familiar with &lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot;&gt;Virtualenv&lt;/a&gt; which is another popular
virtual environment manager for Python. However Virtualenv is really only
meaningful if you have &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; access, a shortcoming which Conda does not have.
Conda’s virtualization is also much more &lt;em&gt;extensive&lt;/em&gt; than Virtualenv. For
instance you can install &lt;a href=&quot;https://cmake.org/&quot;&gt;CMake&lt;/a&gt; in a Conda environment and start
building tools from source. You really don’t have much reasons to use Virtualenv
once you’re on Conda.&lt;/p&gt;

&lt;p&gt;Conda is a package management system that is delivered via 2 software suites,
namely &lt;a href=&quot;https://docs.conda.io/en/latest/miniconda.html&quot;&gt;Miniconda&lt;/a&gt; and &lt;a href=&quot;https://www.anaconda.com/&quot;&gt;Anaconda&lt;/a&gt;. Anaconda is meant to be
a complete software suite for data science and so comes with more than 720
open-source packages out-of-the-box. This means that it takes up a whopping 3 GB
just to install! In comparison Miniconda is concise, lightweight and meant for
users who don’t mind individually downloading and installing required packages.&lt;/p&gt;

&lt;p&gt;I personally feel that Anaconda is very bloated with unecessary packages and 
many users have also experienced slow executions after using it for awhile. For
that reason, I shall advocate for the use of Miniconda which will be used in the
remaining sections of this guide. Since both Anaconda and Miniconda is built
upon conda, their usage syntax is identical and you could easily adapt this
guide for Anaconda if you so wish.&lt;/p&gt;

&lt;p&gt;I shall walk you through installing Miniconda and get you up to speed with the
most common and frequently used commands. Since Python 2 is reaching its end of
life in 2020, I shall install Conda in Python 3 for the sake of continual
relevance of this guide.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Let’s install &lt;strong&gt;Miniconda 3&lt;/strong&gt; via the download page &lt;a href=&quot;https://docs.conda.io/en/latest/miniconda.html&quot;&gt;here&lt;/a&gt;.
The “3” simply means it’s for Python 3 so don’t download the one meant for
Python 2! Anaconda packages also use this naming convention.&lt;/p&gt;

&lt;p&gt;My downloaded file was a shell script called &lt;code class=&quot;highlighter-rouge&quot;&gt;Miniconda3-latest-Linux-x86_64.sh&lt;/code&gt;.
Let’s run it&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sh Miniconda3-latest-Linux-x86_64.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At the end of installation, the installer will prompt if you would like to
initialize conda for your shell by running &lt;code class=&quot;highlighter-rouge&quot;&gt;conda init&lt;/code&gt;. I suggest you do that.
By doing so, Miniconda will add the following lines to your &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# &amp;gt;&amp;gt;&amp;gt; conda initialize &amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# !! Contents within this block are managed by 'conda init' !!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;__conda_setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/home/jinzhe/miniconda3/bin/conda'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'shell.bash'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hook'&lt;/span&gt; 2&amp;gt; /dev/null&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$__conda_setup&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/home/jinzhe/miniconda3/etc/profile.d/conda.sh&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/home/jinzhe/miniconda3/etc/profile.d/conda.sh&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/jinzhe/miniconda3/bin:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
fi
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;__conda_setup
&lt;span class=&quot;c&quot;&gt;# &amp;lt;&amp;lt;&amp;lt; conda initialize &amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above adds new environment variables to your shell so that you may start
running conda commands on the terminal. After conda initialization is done,
restart your shell by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this may work well on a local machine, it’s not ideal if Conda was
installed on a remote server we &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into. This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; is
only automatically executed for interactive non-login shells and not for login
shells. In light of this, &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt; is a much better candidate to store
this environment variable export command.&lt;/p&gt;

&lt;p&gt;In other words, if you’re running on &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;, I’d suggest you cut
and paste that snippet of export code from &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;.
After you’re done, be sure to run &lt;code class=&quot;highlighter-rouge&quot;&gt;source ~/.bash_profile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, be sure to run a first update right after installation&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda update conda&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We are done with installation!&lt;/p&gt;

&lt;h2 id=&quot;quick-start&quot;&gt;Quick Start&lt;/h2&gt;
&lt;p&gt;Let’s start by creating a virtual environment!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# conda create --name &amp;lt;environment-name&amp;gt; &amp;lt;meta-package&amp;gt;&lt;/span&gt;
conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; magical_schoolbus &lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2.7 anaconda&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt; flag indicates the name for the environemt we wish to create&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python=2.7&lt;/code&gt; indicates our Python version for this environment&lt;/li&gt;
  &lt;li&gt;The trailing &lt;code class=&quot;highlighter-rouge&quot;&gt;anaconda&lt;/code&gt; in the end indicates that we wish to initialize our
environment with the ‘anaconda’ meta-package. This is entirely optional!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the new environment is prepared, let’s clean up the installation cache&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda clean &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see a list of all the environments we have created via&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda info &lt;span class=&quot;nt&quot;&gt;--envs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we have only created one environemnt, we should only see
&lt;code class=&quot;highlighter-rouge&quot;&gt;magical_schoolbus&lt;/code&gt;. We are now ready to hop onboard!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;activate magical_schoolbus&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s take a look at which are the programmes currently installed in our
environment&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda list&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It appears that &lt;code class=&quot;highlighter-rouge&quot;&gt;CMake&lt;/code&gt; isn’t in the list. Let’s check if it’s available for
download. To search for packages to install, you may either search
&lt;a href=&quot;https://www.anaconda.com/&quot;&gt;conda cloud&lt;/a&gt; on your browser or via the command line like so&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda search cmake&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Horray! CMake is available! We may proceed to install it in our current virtual
environment&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# conda install --channel &amp;lt;channel-name&amp;gt; --name &amp;lt;environment-name&amp;gt; &amp;lt;package-name&amp;gt;&lt;/span&gt;
conda install cmake &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-y&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--yes&lt;/code&gt; flag simply automates the ‘yes’ approval from you to install
the packages&lt;/li&gt;
  &lt;li&gt;If you wish to install in another virtual environment, simply use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt;  flag&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--channel&lt;/code&gt; indicates additional channel to  search  for  packages if
you do not wish to install from default packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To uninstall a package, simply do&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda uninstall some_package&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally when our work is complete, we may leave the virtual world like so&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;deactivate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To destroy an environment, input command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda remove &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; myenv &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;OR via its alias&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda env remove &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; myenv&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To rename an environment, simply clone the current environment into another
with the desired name and thereafter removing the old environment. Note that
this is a potentially time and space consuming operation&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;deactivate &lt;span class=&quot;c&quot;&gt;# be sure to exit virtual environment first!&lt;/span&gt;
conda create &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; new_name &lt;span class=&quot;nt&quot;&gt;--clone&lt;/span&gt; old_name
conda remove &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; old_name &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all folks! Be sure to check out the official &lt;a href=&quot;https://conda.io/docs/&quot;&gt;docs&lt;/a&gt; for the
latest and complete documentation.&lt;/p&gt;

&lt;h2 id=&quot;important-caveats&quot;&gt;Important caveats&lt;/h2&gt;
&lt;p&gt;Referenced from &lt;a href=&quot;https://caffe2.ai/docs/faq.html#why-is-caffe2-not-working-as-expected-in-anaconda&quot;&gt;here&lt;/a&gt;&lt;br /&gt;
There are 3 common ways people create their Conda environments:&lt;/p&gt;

&lt;h3 id=&quot;method-1&quot;&gt;Method 1&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; some_env&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;DO NOT DO THIS&lt;/strong&gt; this, as this creates a brand new env but does NOT install Python or
setuptools into the env. This means that if you activate your new env with
&lt;code class=&quot;highlighter-rouge&quot;&gt;source activate some_env&lt;/code&gt; immediately after you create it, then your
root env &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; will still be activated. Many build tools rely on the Python
package &lt;code class=&quot;highlighter-rouge&quot;&gt;distutils&lt;/code&gt; to know where to install Python files. If you use this
method, then &lt;code class=&quot;highlighter-rouge&quot;&gt;distutils&lt;/code&gt; will still point to the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; Python instead of your
Python env, which might conflict with other flags passed to cmake system.&lt;/p&gt;

&lt;h3 id=&quot;method-2&quot;&gt;Method 2&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; some_env anaconda&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;DO NOT DO THIS&lt;/strong&gt; either! This will install &lt;strong&gt;all&lt;/strong&gt; base Anaconda packages into
your new env. This is a lot of packages, most of which you will not use. This
wastes a lot of memory and takes a long time to install. This also makes it
harder to install later packages, as dependency resolution is complicated by all
the existing packages.&lt;/p&gt;

&lt;h3 id=&quot;method-3&quot;&gt;Method 3&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; some_env &lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;ALWAYS DO THIS&lt;/strong&gt;! This will create a new env and install only the minimal
packages, including Python setuptools and &lt;code class=&quot;highlighter-rouge&quot;&gt;distutils&lt;/code&gt;. If you use this to create
all your conda envs and never install packages into your root env then you will 
have a much better experience with Conda.&lt;/p&gt;</content><author><name>Jin Zhe</name></author><category term="Anaconda" /><category term="Conda" /><category term="Miniconda" /><summary type="html">“Conda is an open source package management system and environment management system that runs on Windows, macOS and Linux. Conda quickly installs, runs and updates packages and their dependencies. Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language.”</summary></entry></feed>